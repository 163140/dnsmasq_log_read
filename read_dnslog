#!/usr/bin/env perl 
#===============================================================================
#         FILE: read_dnslog.pl
#        USAGE: ./read_dnslog.pl  
#  DESCRIPTION: Read, parse, and show dns queries from dnsmasq log file
# REQUIREMENTS: List::MoreUtils GEtopt::Long Pod::Usage
#       AUTHOR: 163140@autistici.org
#      CREATED: 27.07.2016 20:44:02
#     Copyright (C) 2016} Shiny Cat
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#===============================================================================

use strict;
use warnings;
use utf8;
use 5.020;
use List::MoreUtils qw( uniq )		;
use Getopt::Long;
use autodie;
use experimental qw( smartmatch )	;
use Pod::Usage;

sub Read_2_List {
	my $file = shift;
	my @list = ();
	if (-r $file) {
		open( my $fh, "<", $file );
		@list = <$fh>;
	}
	chomp @list;
	return @list;
}



my $help		= 0							;
my $white		= '/etc/whitelist.domain'	; # good domains
my $logfile		= '/var/log/dnsmasq.log'	; # logfile to analyze
my $man			= 0							; # display full doc



GetOptions(
    'help|?|h'			=>		\$help		,
	'whitelist|w=s'		=>		\$white		,
	'logfile|l=s'		=>		\$logfile	,
	'man'				=>		\$man		,
) or die(pod2usage( 1 ));

pod2usage( -verbose		=> 0 )	if $help				;
pod2usage( -verbose 	=> 2 )	if $man					;
open( my $fh, "<", $logfile )	unless ( -x $logfile )	; # use autodie


my @white				=		&Read_2_List( $white )	;
my $whitelist			=		join   ( "|", @white )	;
$whitelist				=		qr/$whitelist/ix		;
my @log					=		&Read_2_List( $logfile );


my $blocked_ads			= grep { /is 0.0.0.0/ }	@log	;
my $cached				= grep { /cached/ }		@log	;
my $total_dns			= grep { /query/ }		@log	;
@log					= grep /reply.*is/,		@log	;  
@log					= map  { /reply\sw?w?w?
								 \.?(.*?)\sis\s
								 .*/x}			@log	;
@log					= grep { ! /$whitelist/}@log
										if @white		;
@log					= uniq					@log	;


for (sort @log) {
	s/.*\t//;
	say
};
say "Cached queries: $cached, Blocked: $blocked_ads, Total: $total_dns";



=head1 NAME

read_dnslog - A dnsmasq log reader and parser

=head1 SYNOPSIS

read_dnslog [options]

 Options:
   -h  	-help       	display this message
   -w	-whitelist	list of acceptable domains. One line per domain.
   			By default "/etc/whitelist.domain". Can be perl regex.
			One comment starting from # per line
   -l  	-logfile        Dnsmasq logfile. By default /var/log/dnsmasq.log
   -man			Full information

=head1 DESCRIPTION

This script implements a simple dnsmasq logfile read and excluding from output
whiltelisted and greylisted domains. Whitelist and greylist contain domains name
(one per line) or perl regex (one per line). If no whitelist and/or greylist
given script use an empty data.

=head1 AUTHOR

Shiny Cat aka EA1A87. 163140@autistici.org

=head1 COPYRIGHT

This library is open source software and distributed ander terms GNU General
Public License v3 or (at you option) later.

=cut

#vim:ts=4
